 ## Do this once recording rules is disabled in Prometheus
  - name: alloy
    namespace: monitoring
    chart: grafana/alloy
    values:
      - alloy:
          enableReporting: true
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
          configMap:
            content: |-
              mimir.rules.kubernetes "local" {
                address = "http://mimir-ruler.monitoring.svc:8080"
                tenant_id = "anonymous"
              }

              loki.write "default" {
                endpoint {
                  url = "http://loki-gateway.monitoring/loki/api/v1/push"
                }
                external_labels = {
                  job = "grafana-alloy",
                }
              }

              discovery.kubernetes "kubernetes_pods" {
                role = "pod"
              }

              discovery.relabel "kubernetes_pods" {
                targets = discovery.kubernetes.kubernetes_pods.targets

                rule {
                  source_labels = ["__meta_kubernetes_pod_controller_name"]
                  regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
                  target_label  = "__tmp_controller_name"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
                  regex         = "^;*([^;]+)(;.*)?$"
                  target_label  = "app"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
                  regex         = "^;*([^;]+)(;.*)?$"
                  target_label  = "instance"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
                  regex         = "^;*([^;]+)(;.*)?$"
                  target_label  = "component"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_node_name"]
                  target_label  = "node_name"
                }

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  target_label  = "namespace"
                }

                rule {
                  source_labels = ["namespace", "app"]
                  separator     = "/"
                  target_label  = "job"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  target_label  = "pod"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  target_label  = "container"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  separator     = "/"
                  target_label  = "__path__"
                  replacement   = "/var/log/pods/*$1/*.log"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
                  separator     = "/"
                  regex         = "true/(.*)"
                  target_label  = "__path__"
                  replacement   = "/var/log/pods/*$1/*.log"
                }
              }

              local.file_match "kubernetes_pods" {
                path_targets = discovery.relabel.kubernetes_pods.output
              }

              loki.process "kubernetes_pods" {
                forward_to = [loki.write.default.receiver]

                stage.cri {}

                stage.match {
                  selector            = "{namespace=\"backend\"} |~ \".*\\\"kube-probe\\\\/\\\\d{1}.\\\\d{2}.*\" "
                  action              = "drop"
                  drop_counter_reason = "kubeProbe"
                }

                stage.match {
                  selector = "{namespace=\"backend\"}"
                  stage.drop {
                    drop_counter_reason = "PrometheusMetrics200"
                    expression          = ".*\\\"Prometheus/\\d{1}\\.\\d{2}\\.\\d{1,2}.*(\\\"\\/metrics\\\".*)(.*\\:200.*)"
                  }

                  stage.drop {
                    longer_than = "2MiB"
                  }
                }
              }

              loki.source.file "kubernetes_pods" {
                targets               = local.file_match.kubernetes_pods.targets
                forward_to            = [loki.process.kubernetes_pods.receiver]
                legacy_positions_file = "/run/promtail/positions.yaml"
              }
          mounts:
            varlog: true

        serviceMonitor:
          enabled: true
           
